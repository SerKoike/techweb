'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const request = require('supertest');
const app = require('../app');
const DB = require('../models/Database');

// The awaited results
const getUsers = require('./results/users/get-users.json');
const getUserOne = require('./results/users/get-users-1.json');
const postUser = require('./results/users/post-users.json');
const deleteUser = require('./results/users/delete-users-1.json');
const putUser = require('./results/users/put-users-1.json');
const sql = DB.sql('../dumps/test-data.sql');

_ava2.default.serial('Users - GET - Get all users', t => {
  DB.accessor.query(sql).then(() => {
    return request(app).get('/users').then(res => {
      t.is(res.status, 200);
      t.deepEqual(res.body, getUsers.result);
    });
  }).catch(error => {
    throw error;
  });
});

_ava2.default.serial('Users - GET - Get user id ' + getUserOne.parameters.id, t => {
  DB.accessor.query(sql).then(() => {
    return request(app).get('/users/' + getUserOne.parameters.id).then(res => {
      t.is(res.status, 200);
      t.deepEqual(res.body, getUserOne.result);
    });
  }).catch(error => {
    throw error;
  });
});

_ava2.default.serial('Users - POST - Create User', t => {
  DB.accessor.query(sql).then(() => {
    return request(app).post('/users/').send(postUser.body).then(res => {
      t.is(res.status, 200);
      t.deepEqual(res.body, postUser.result);
    });
  }).catch(error => {
    throw error;
  });
});

_ava2.default.serial('Users - DELETE - Delete User with id ' + deleteUser.parameters.id, t => {
  DB.accessor.query(sql).then(() => {
    return request(app).delete('/users/' + deleteUser.parameters.id).then(res => {
      t.is(res.status, 200);
      t.deepEqual(res.body, deleteUser.result);
    });
  }).catch(error => {
    throw error;
  });
});

_ava2.default.serial('Users - PUT - Update User with id ' + putUser.parameters.id, t => {
  DB.accessor.query(sql).then(() => {
    return request(app).put('/users/' + putUser.parameters.id).send(putUser.body).then(res => {
      t.is(res.status, 200);
      t.deepEqual(res.body, deleteUser.result);
    });
  }).catch(error => {
    throw error;
  });
});
//# sourceMappingURL=..\node_modules\.cache\ava\239e338b52ee651019d85b205a2f467d.js.map